(* Outdated code that we don't want to through away goes here.*)
(* make note of the removal and what replaced it. *)
(* TODO: Remove before final submit*)

These methods are an attempt to consolidate neighbros method, but is buggy
:::::::::
(* a list of possible neigbor nodes with wrap around. Each entry is the (x, y,
   x_add, x_mod, y_add, y_mod)*)
let neighbor_list gb =
  let h = gb_height gb in
  let w = gb_width gb in
  [
    (-1, -1, w, w, h, h);
    (0, -1, 0, 1, h, h);
    (1, -1, 0, w, h, h);
    (1, 0, 0, w, 0, 1);
    (1, -1, 0, w, 0, h);
    (0, -1, 0, 1, 0, h);
    (-1, -1, w, w, 0, h);
    (-1, 0, w, w, 0, 1);
  ]

(* [neighbors_aux] is a ~tail recursive~ helper function called by [neighbors]
   that sums the number of neighbors of a given node (x,y) in a given game.*)
let rec neighbors_aux gb x y lst acc =
  match lst with
  | [] -> acc
  | (nx, ny, w_add, w_mod, h_add, h_mod) :: t -> begin
      match
        node gb (x + nx + (w_add mod w_mod)) (y + ny + (h_add mod h_mod))
      with
      | Dead -> neighbors_aux gb x y t acc
      | Alive -> neighbors_aux gb x y t (acc + 1)
    end

(** [neighbors gb x y] Returns the number of neighbors of a certain node at
    coordinate [x,y] in gameboard [gb].*)
let neighbors gb x y = neighbors_aux gb x y (neighbor_list gb) 0