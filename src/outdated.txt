(* Outdated code that we don't want to through away goes here.*)
(* make note of the removal and what replaced it. *)
(* TODO: Remove before final submit*)

These methods were consolidated into one neighbros method 
:::::::::
(** Is 0 if neighbor to the north is dead, 1 if alive *)
  let check_north gb x y =
    if y = 1 then 0
    else
      let n = node gb x (y - 1) in
      match n with
      | Dead -> 0
      | Alive -> 1
  
  (** Is 0 if neighbor to the south is dead, 1 if alive *)
  let check_south gb x y =
    if y = gb_height gb then 0
    else
      let n = node gb x (y + 1) in
      match n with
      | Dead -> 0
      | Alive -> 1
  
  (** Is 0 if neighbor to the east is dead, 1 if alive *)
  let check_east gb x y =
    if x = gb_width gb then 0
    else
      let n = node gb (x + 1) y in
      match n with
      | Dead -> 0
      | Alive -> 1
  
  (** Is 0 if neighbor to the west is dead, 1 if alive *)
  let check_west gb x y =
    if x = 1 then 0
    else
      let n = node gb (x - 1) y in
      match n with
      | Dead -> 0
      | Alive -> 1
  
  (** Is 0 if neighbor to the northwest is dead, 1 if alive *)
  let check_nw gb x y =
    if y = 1 || x = 1 then 0
    else
      let n = node gb (x - 1) (y - 1) in
      match n with
      | Dead -> 0
      | Alive -> 1
  
  (** Is 0 if neighbor to the northeast is dead, 1 if alive *)
  let check_ne gb x y =
    if y = 1 || x = gb_width gb then 0
    else
      let n = node gb (x + 1) (y - 1) in
      match n with
      | Dead -> 0
      | Alive -> 1
  
  (** Is 0 if neighbor to the southwest is dead, 1 if alive *)
  let check_sw gb x y =
    if y = gb_height gb || x = 1 then 0
    else
      let n = node gb (x - 1) (y + 1) in
      match n with
      | Dead -> 0
      | Alive -> 1
  
  (** Is 0 if neighbor to the southeast is dead, 1 if alive *)
  let check_se gb x y =
    if y = gb_height gb || x = gb_width gb then 0
    else
      let n = node gb (x + 1) (y + 1) in
      match n with
      | Dead -> 0
      | Alive -> 1
  
  (** [neighbors g x y] is the number of neighbors that the node located at
      position ([x], [y]) on the grid has.
  
      Precondition: (x,y) must be a valid position in the grid *)
  let neighbors gb x y =
    check_north gb x y + check_south gb x y + check_east gb x y
    + check_west gb x y + check_nw gb x y + check_ne gb x y + check_sw gb x y
    + check_se gb x y
:::::::::